file = open('Входные значения.txt') #Открытие файла с входными значениями

lines = file.readlines()#Считывание всего файла в один массив

#Работа алгоритма до тех пор, пока не будут обработаны все конверсионные
#таблицы, а учитывая алгоритм "отрезания" обработанных элементов, пока в массиве
#строк файла будут хоть какие-либо элементы, а его длина будет отлична от нуля
while len(lines)!= 0: 

    n = int(lines[0])#Первый элемент массива файла - размер конверсионной
                     #таблицы

    mas = [[0 for i in range(n)] for j in range(n)]
    #Присвоение нулевым элементам матрицы нужных элементов из массива файла
    for i in range(n):

        lines[i + 1] = list(lines[i + 1]. split())

        for j in range(n - 1):
            
            mas[i][j] = float(lines[i + 1][j])

    #Обработка массива таким образом, чтобы на главной диагонали стали единичные
    #элементы
    for i in range(0,n):
        
        isok = False
        
        for j in range(0,n):

            if i == j:
                isok = True
                sdvig = mas[i][j]
                mas[i][j] = 1

            if i!=j and isok:
                mas[i][j], sdvig = sdvig, mas[i][j]



    for nom in range(n): #Алгоритм обработки каждой стартовой валюты
        

        pbl = [1] * (n - 1) #Прибыль от какой-то сделки в данные момент
        pere = [nom + 1] * (n-1)#Последовательность преобразований, приведших
                                #к данной прибыли

        n1 = 0 #Количество преобразований на данный момент  

        #Алгоритм обработки лишь таких последовательностей, размерность которых
        #меньше размерности конверсионной таблицы
        while n1 < n: 
            
            k = 0
            j = 0

            #Алгоритм обработки всех возможных преобразований на данный момент
            while k <(len(pbl)):

                if j > (n - 1): #Проход по всем столбцам
                    j = 0
                    
                if mas[int(pere[k] % 10) - 1][j] != 1:

                    #Поиск прибыль от какой-то сделки
                    pbl[k] = pbl[k] * mas[int(pere[k] % 10) - 1][j]

                    #Запись последовательности преобразований этой сделки
                    pere[k] = pere[k] * 10 + (j + 1)

                else: k -= 1
                k += 1
                j += 1

            #Временное сохранение важных массивов для дальнейшей обработке        
            zpbl = pbl 
            zpere = pere
            
            #Каждая имеющаясь прибыль может быть преобразована (n-1) способами
            pbl = [0] * (n-1) ** 2 
            pere = [0] * (n-1) ** 2
                        

            #Сохранение уже имеющихся последовательностей преобразования и
            #и прибыли для обработки новыми сделками
            m = 0
            for k1 in range(n-1):
                for j in range(n-1):
                    pbl[m] = zpbl[k1]
                    pere[m] = zpere[k1]
                    m += 1


            pr = [] #Массив абсолютной прибыли
            for k1 in range(len(pbl)):
                pr.append(pbl[k1] * mas[int(pere[k1] % 10) - 1][nom])


            #Обработка всех возможных прибылей данной минимальной размерности
            #и выявление последовательностей, удовлетворяющих условиям задачи
            vv = []
            for i in range(len(pbl)):
                if pr[i] > 1.001:
                    vv.append(pere[i] * 10 + nom + 1)
                    isok = True
                    
                    break
                else: isok = False

            #Прекращение обработки данной конверсионной таблицы в случае
            #нахождения прибыли, удовлетворяющей условиям
            if isok:  
                break

            n1 += 1

        if isok:
            break

    #Вывод наименьшей последовательности, за которую ожет быть получена
    #необходимая прибыль
    if vv == []:
        print('no arbitrage sequence exists')
    else:
        vv = min(vv)
        vv = list(str(vv))
        for i in range(len(vv)):
            print(vv[i], end = ' ')
        print()

    #Удаление уже обработанных элементов массива файла
    for i in range(n + 1):
        lines.pop(0)




    
                
